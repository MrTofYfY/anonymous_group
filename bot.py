# bot.py
import os
import json
import time
import random
import logging
import threading
from dotenv import load_dotenv
from flask import Flask, send_file
from io import BytesIO

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters, ConversationHandler
)

# -------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ TOKEN
# -------------------------
load_dotenv()
TOKEN = os.getenv("YOUR_BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è YOUR_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏.")

# -------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# -------------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# -------------------------
# Flask (–¥–ª—è Render)
# -------------------------
flask_app = Flask(__name__)

@flask_app.route("/")
def index():
    return "‚úÖ Telegram bot is running!"

# -------------------------
# –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö
# -------------------------
DATA_FILE = "data.json"

def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        # –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
        return {
            "users": {},         # str(user_id) -> {"username": str|None, "anon": int, "muted_until": 0}
            "admins": [],        # list of "@username"
            "banned": [],        # list of "@username"
            "permissions": {},   # "@username" -> {perm: bool, ...}
            "message_count": 0,
            "admin_chat_enabled": False
        }

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(DATA, f, ensure_ascii=False, indent=2)

DATA = load_data()

# -------------------------
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã / —Å–æ—Å—Ç–æ—è–Ω–∏—è
# -------------------------
STATE_WAIT_ADMIN_USERNAME = "WAIT_ADMIN_USERNAME"
STATE_WAIT_REMOVE_ADMIN = "WAIT_REMOVE_ADMIN"
STATE_WAIT_PERMS_USERNAME = "WAIT_PERMS_USERNAME"
STATE_WAIT_MUTE = "WAIT_MUTE"
STATE_WAIT_IMPERSONATE = "WAIT_IMPERSONATE"
STATE_WAIT_BROADCAST = "WAIT_BROADCAST"
STATE_WAIT_PERM_TOGGLE = "WAIT_PERM_TOGGLE"  # internal message state for toggles (not used for message handler)
STATE_USER_SEND = "USER_SEND"

# —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∞–≤
ALL_PERMS = ["broadcast", "impersonate", "manage_perms", "stats", "mute", "export", "admin_chat"]

# -------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -------------------------
def ensure_user_registered(user):
    """–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ DATA['users'] –µ—Å–ª–∏ –Ω–µ—Ç"""
    uid = str(user.id)
    if uid not in DATA["users"]:
        anon = random.randint(1000, 9999)
        DATA["users"][uid] = {
            "username": user.username if user.username else None,
            "anon": anon,
            "muted_until": 0
        }
        save_data()

def get_anon_display(uid):
    """–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç '–ê–Ω–æ–Ω–∏–º#1234' –¥–ª—è user_id —Å—Ç—Ä–æ–∫–æ–π"""
    info = DATA["users"].get(str(uid))
    if not info:
        return "–ê–Ω–æ–Ω–∏–º"
    return f"–ê–Ω–æ–Ω–∏–º#{info['anon']}"

def is_banned_username(username):
    if not username:
        return False
    return username.startswith("@") and username in DATA["banned"]

def is_admin_username(username):
    if not username:
        return False
    return username.startswith("@") and username in DATA["admins"]

def username_of_user_id(uid):
    info = DATA["users"].get(str(uid))
    return info.get("username") if info else None

def check_permission(username, perm):
    """username like '@mellfreezy'"""
    perms = DATA["permissions"].get(username, {})
    return perms.get(perm, False)

def init_admin_if_none(admin_username):
    """–ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–Ω–æ–≥–æ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å—Ç–∞—Ä—Ç–µ)"""
    if admin_username not in DATA["admins"]:
        DATA["admins"].append(admin_username)
    if admin_username not in DATA["permissions"]:
        # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–∞—ë–º –≤—Å–µ –ø—Ä–∞–≤–∞ –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—é
        DATA["permissions"][admin_username] = {p: True for p in ALL_PERMS}
    save_data()

# -------------------------
# UI helpers
# -------------------------
def perms_to_keyboard_for_user(target_username):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç InlineKeyboard —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–ª—è target_username"""
    perms = DATA["permissions"].get(target_username, {p: False for p in ALL_PERMS})
    rows = []
    for p in ALL_PERMS:
        mark = "‚úÖ" if perms.get(p, False) else "‚ùå"
        # callback –ø—Ä–∏–º–µ—Ä: "TOGGLE|@user|perm"
        rows.append([InlineKeyboardButton(f"{mark} {p}", callback_data=f"TOGGLE|{target_username}|{p}")])
    # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    rows.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="ADMIN_PANEL")])
    return InlineKeyboardMarkup(rows)

def admin_panel_keyboard():
    kb = [
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="SHOW_USERS")],
        [InlineKeyboardButton("üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ", callback_data="SHOW_BANNED")],
        [InlineKeyboardButton("üßë‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã", callback_data="SHOW_ADMINS")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="SHOW_STATS")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="ADD_ADMIN"),
         InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="REMOVE_ADMIN")],
        [InlineKeyboardButton("‚öôÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è", callback_data="SET_PERMS"),
         InlineKeyboardButton("‚è±Ô∏è –¢–∞–π–º-–∞—É—Ç / –ú—É—Ç", callback_data="MUTE_USER")],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", callback_data="EXPORT_DATA"),
         InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="BROADCAST")],
        [InlineKeyboardButton("üßë‚Äçüí¨ –ü–∏—Å–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏", callback_data="IMPERSONATE"),
         InlineKeyboardButton("üí¨ –†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤", callback_data="TOGGLE_ADMIN_CHAT")],
    ]
    return InlineKeyboardMarkup(kb)

# -------------------------
# –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
# -------------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user_registered(user)
    uid = str(user.id)

    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ–Ω—é
    kb = [
        [InlineKeyboardButton("üó®Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="USER_SEND")],
        [InlineKeyboardButton("üíñ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", url="https://t.me/mellfreezy_dons")]
    ]
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(kb))

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uname = f"@{user.username}" if user.username else None
    if not uname or uname not in DATA["admins"]:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.")
        return
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel_keyboard())

async def send_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    ensure_user_registered(user)
    uid = str(user.id)
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –º—É—Ç/–±–∞–Ω
    if DATA["users"][uid].get("muted_until", 0) > time.time():
        await update.message.reply_text("‚è±Ô∏è –í—ã –∑–∞–º—å—é—á–µ–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return
    await update.message.reply_text("üó®Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–±—É–¥–µ—Ç —Ä–∞–∑–æ—Å–ª–∞–Ω–æ –¥—Ä—É–≥–∏–º):")
    context.user_data["state"] = STATE_USER_SEND

# -------------------------
# CallbackQuery handler (–∫–Ω–æ–ø–∫–∏)
# -------------------------
async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user = query.from_user
    uname = f"@{user.username}" if user.username else None
    admin_name = uname

    # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –≥–ª–∞–≤–Ω–∞—è
    if data == "ADMIN_PANEL" or data == "OPEN_ADMIN":
        if not admin_name or admin_name not in DATA["admins"]:
            await query.edit_message_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        await query.edit_message_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel_keyboard())
        return

    # SHOW users
    if data == "SHOW_USERS":
        if not admin_name or admin_name not in DATA["admins"]:
            await query.edit_message_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        lines = []
        for uid, info in DATA["users"].items():
            username = f"@{info['username']}" if info.get("username") else "(–±–µ–∑ username)"
            if username in DATA["banned"]:
                lines.append(f"–ó–∞–±–∞–Ω–µ–Ω ‚Äî {username}")
            else:
                lines.append(f"–ê–Ω–æ–Ω–∏–º#{info['anon']} ‚Äî {username}")
        text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + ("\n".join(lines) if lines else "‚Äî –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ‚Äî")
        await query.edit_message_text(text)
        return

    # SHOW banned
    if data == "SHOW_BANNED":
        if not admin_name or admin_name not in DATA["admins"]:
            await query.edit_message_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        lines = [u for u in DATA["banned"]] if DATA["banned"] else []
        text = "üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ:\n" + ("\n".join(lines) if lines else "‚Äî –Ω–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö ‚Äî")
        await query.edit_message_text(text)
        return

    # SHOW admins
    if data == "SHOW_ADMINS":
        if not admin_name or admin_name not in DATA["admins"]:
            await query.edit_message_text("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        lines = []
        for a in DATA["admins"]:
            perms = DATA["permissions"].get(a, {})
            perms_str = ", ".join(f"{k}:{'‚úÖ' if perms.get(k) else '‚ùå'}" for k in ALL_PERMS)
            lines.append(f"{a} ‚Äî {perms_str}")
        text = "üßë‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n" + ("\n".join(lines) if lines else "‚Äî –Ω–µ—Ç –∞–¥–º–∏–Ω–æ–≤ ‚Äî")
        await query.edit_message_text(text)
        return

    # ADD_ADMIN
    if data == "ADD_ADMIN":
        if not admin_name or admin_name not in DATA["admins"] or not check_permission(admin_name, "manage_perms"):
            await query.edit_message_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
            return
        # –∂–¥–µ–º –≤–≤–æ–¥–∞ username
        context.user_data["await_action"] = STATE_WAIT_ADMIN_USERNAME
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ @username –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—ã:")
        return

    # REMOVE_ADMIN
    if data == "REMOVE_ADMIN":
        if not admin_name or admin_name not in DATA["admins"] or not check_permission(admin_name, "manage_perms"):
            await query.edit_message_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
            return
        context.user_data["await_action"] = STATE_WAIT_REMOVE_ADMIN
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ @username –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∞–¥–º–∏–Ω–æ–≤:")
        return

    # SET_PERMS
    if data == "SET_PERMS":
        if not admin_name or admin_name not in DATA["admins"] or not check_permission(admin_name, "manage_perms"):
            await query.edit_message_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
            return
        context.user_data["await_action"] = STATE_WAIT_PERMS_USERNAME
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ @username –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:")
        return

    # MUTE user
    if data == "MUTE_USER":
        if not admin_name or admin_name not in DATA["admins"] or not check_permission(admin_name, "mute"):
            await query.edit_message_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
            return
        context.user_data["await_action"] = STATE_WAIT_MUTE
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: @username minutes (–Ω–∞–ø—Ä–∏–º–µ—Ä: @joe 30)")
        return

    # EXPORT DATA
    if data == "EXPORT_DATA":
        if not admin_name or admin_name not in DATA["admins"] or not check_permission(admin_name, "export"):
            await query.edit_message_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
            return
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º data.json –∫–∞–∫ —Ñ–∞–π–ª
        buf = BytesIO()
        buf.write(json.dumps(DATA, ensure_ascii=False, indent=2).encode("utf-8"))
        buf.seek(0)
        await query.message.reply_document(document=InputFile(buf, filename="data.json"))
        await query.edit_message_text("üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω data.json")
        return

    # BROADCAST
    if data == "BROADCAST":
        if not admin_name or admin_name not in DATA["admins"] or not check_permission(admin_name, "broadcast"):
            await query.edit_message_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
            return
        context.user_data["await_action"] = STATE_WAIT_BROADCAST
        await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        return

    # IMPERSONATE
    if data == "IMPERSONATE":
        if not admin_name or admin_name not in DATA["admins"] or not check_permission(admin_name, "impersonate"):
            await query.edit_message_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
            return
        context.user_data["await_action"] = STATE_WAIT_IMPERSONATE
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: anon_id —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234 –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º)")
        return

    # TOGGLE_ADMIN_CHAT
    if data == "TOGGLE_ADMIN_CHAT":
        if not admin_name or admin_name not in DATA["admins"] or not check_permission(admin_name, "admin_chat"):
            await query.edit_message_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
            return
        DATA["admin_chat_enabled"] = not DATA.get("admin_chat_enabled", False)
        save_data()
        await query.edit_message_text(f"üí¨ –†–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤: {'–í–ö–õ' if DATA['admin_chat_enabled'] else '–í–´–ö–õ'}")
        return

    # TOGGLE perm callback e.g. "TOGGLE|@user|perm"
    if data.startswith("TOGGLE|"):
        parts = data.split("|")
        if len(parts) != 3:
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            return
        target = parts[1]
        perm = parts[2]
        if not admin_name or admin_name not in DATA["admins"] or not check_permission(admin_name, "manage_perms"):
            await query.edit_message_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
            return
        # ensure perms dict
        if target not in DATA["permissions"]:
            DATA["permissions"][target] = {p: False for p in ALL_PERMS}
        DATA["permissions"][target][perm] = not DATA["permissions"][target].get(perm, False)
        save_data()
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await query.edit_message_text(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {target}:", reply_markup=perms_to_keyboard_for_user(target))
        return

    # USER_SEND button pressed by normal user
    if data == "USER_SEND":
        # set user state to send
        context.user_data["state"] = STATE_USER_SEND
        await query.message.reply_text("üó®Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º (–∞–Ω–æ–Ω–∏–º–Ω–æ):")
        return

    # Back to admin panel
    if data == "ADMIN_PANEL":
        if not admin_name or admin_name not in DATA["admins"]:
            await query.edit_message_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        await query.edit_message_text("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel_keyboard())
        return

    # fallback
    await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")

# -------------------------
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ)
# -------------------------
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = str(user.id)
    text = update.message.text.strip()
    ensure_user_registered(user)

    # –µ—Å–ª–∏ –∞–¥–º–∏–Ω –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è action (add/remove/set perms/mute/broadcast/impersonate)
    action = context.user_data.get("await_action")

    # ---- ADD ADMIN ----
    if action == STATE_WAIT_ADMIN_USERNAME:
        context.user_data.pop("await_action", None)
        username = text.split()[0]
        if not username.startswith("@"):
            await update.message.reply_text("–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username.")
            return
        if username in DATA["admins"]:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω.")
            return
        DATA["admins"].append(username)
        # –¥–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
        DATA["permissions"][username] = {p: False for p in ALL_PERMS}
        DATA["permissions"][username]["manage_perms"] = True
        DATA["permissions"][username]["stats"] = True
        save_data()
        await update.message.reply_text(f"‚úÖ {username} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω.")
        return

    # ---- REMOVE ADMIN ----
    if action == STATE_WAIT_REMOVE_ADMIN:
        context.user_data.pop("await_action", None)
        username = text.split()[0]
        if not username.startswith("@"):
            await update.message.reply_text("–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username.")
            return
        if username not in DATA["admins"]:
            await update.message.reply_text("–¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç.")
            return
        DATA["admins"].remove(username)
        DATA["permissions"].pop(username, None)
        save_data()
        await update.message.reply_text(f"‚úÖ {username} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–æ–≤.")
        return

    # ---- SET PERMISSIONS: –æ–∂–∏–¥–∞–Ω–∏–µ username ----
    if action == STATE_WAIT_PERMS_USERNAME:
        context.user_data.pop("await_action", None)
        username = text.split()[0]
        if not username.startswith("@"):
            await update.message.reply_text("–£–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π @username.")
            return
        # ensure entry
        if username not in DATA["permissions"]:
            DATA["permissions"][username] = {p: False for p in ALL_PERMS}
        save_data()
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–∞–≤–∞–º–∏
        await update.message.reply_text(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {username}:", reply_markup=perms_to_keyboard_for_user(username))
        return

    # ---- MUTE user (format: @user minutes) ----
    if action == STATE_WAIT_MUTE:
        context.user_data.pop("await_action", None)
        parts = text.split()
        if len(parts) < 2:
            await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: @user 30")
            return
        username = parts[0]
        try:
            minutes = int(parts[1])
        except:
            await update.message.reply_text("–£–∫–∞–∂–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
            return
        # find user id by username
        target_uid = None
        for uid_k, info in DATA["users"].items():
            if info.get("username") and f"@{info['username']}" == username:
                target_uid = uid_k
                break
        if not target_uid:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        DATA["users"][target_uid]["muted_until"] = int(time.time()) + minutes*60
        save_data()
        await update.message.reply_text(f"‚è±Ô∏è {username} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")
        return

    # ---- BROADCAST by admin ----
    if action == STATE_WAIT_BROADCAST:
        context.user_data.pop("await_action", None)
        # —É–±–µ–¥–∏–º—Å—è —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ
        uname = f"@{user.username}" if user.username else None
        if not uname or uname not in DATA["admins"] or not check_permission(uname, "broadcast"):
            await update.message.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
            return
        text_to_send = text
        # —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º –Ω–µ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–º
        DATA["message_count"] = DATA.get("message_count", 0) + 1
        save_data()
        for uid_k, info in DATA["users"].items():
            username_k = f"@{info['username']}" if info.get("username") else None
            if username_k in DATA["banned"]:
                continue
            try:
                await context.bot.send_message(chat_id=int(uid_k), text=f"üì¢ –†–∞—Å—Å—ã–ª–∫–∞:\n\n{text_to_send}")
            except Exception as e:
                logger.warning(f"Broadcast failed for {uid_k}: {e}")
        await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return

    # ---- IMPERSONATE (format: anon_id —Ç–µ–∫—Å—Ç...) ----
    if action == STATE_WAIT_IMPERSONATE:
        context.user_data.pop("await_action", None)
        uname = f"@{user.username}" if user.username else None
        if not uname or uname not in DATA["admins"] or not check_permission(uname, "impersonate"):
            await update.message.reply_text("‚õî –ù–µ—Ç –ø—Ä–∞–≤.")
            return
        parts = text.split(maxsplit=1)
        if len(parts) < 2:
            await update.message.reply_text("–§–æ—Ä–º–∞—Ç: anon_id —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1234 –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º)")
           
