from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, MessageHandler, CommandHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)
from flask import Flask
import threading
import logging
import json
import random

# ---------- Flask –¥–ª—è Render ----------
app_web = Flask('')

@app_web.route('/')
def home():
    return "‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_web():
    app_web.run(host='0.0.0.0', port=10000)

threading.Thread(target=run_web).start()

# ---------- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# ---------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ----------
DATA_FILE = "data.json"
ADMIN_USERNAME = "mellfreezy"

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ----------
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return {"users": {}, "banned": []}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

data = load_data()

# ---------- –°–æ—Å—Ç–æ—è–Ω–∏—è ----------
SEND_MESSAGE, BROADCAST, BAN, UNBAN = range(4)

# ---------- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ ----------
def is_admin(update: Update) -> bool:
    return update.effective_user.username == ADMIN_USERNAME

# ---------- –ö–æ–º–∞–Ω–¥–∞ /start ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user

    if str(user.id) not in data["users"]:
        random_id = random.randint(1, 99999)
        anon_name = f"–ê–Ω–æ–Ω–∏–º#{random_id}"
        data["users"][str(user.id)] = {"username": user.username, "anon_name": anon_name}
        save_data(data)

    if is_admin(update):
        await admin_panel(update, context)
    else:
        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —á–∞—Ç, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /send"
        )

# ---------- –ö–æ–º–∞–Ω–¥–∞ /admin ----------
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        await update.message.reply_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    keyboard = [
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="users"),
         InlineKeyboardButton("üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ", callback_data="banned")],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")],
        [InlineKeyboardButton("‚õî –ë–∞–Ω", callback_data="ban"),
         InlineKeyboardButton("‚úÖ –†–∞–∑–±–∞–Ω", callback_data="unban")],
        [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ—Ö", callback_data="clear")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=reply_markup)

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ ----------
async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if not is_admin(update):
        return

    if query.data == "users":
        if not data["users"]:
            await query.edit_message_text("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        else:
            users_list = "\n".join(
                [f"@{info['username']} ‚Äî {info['anon_name']}" for info in data["users"].values()]
            )
            await query.edit_message_text(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{users_list}")

    elif query.data == "banned":
        if not data["banned"]:
            await query.edit_message_text("‚úÖ –ù–µ—Ç –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö.")
        else:
            banned_list = "\n".join(f"@{u}" for u in data["banned"])
            await query.edit_message_text(f"üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{banned_list}")

    elif query.data == "broadcast":
        await query.edit_message_text("‚úçÔ∏è –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
        return BROADCAST

    elif query.data == "ban":
        await query.edit_message_text("üö´ –í–≤–µ–¥–∏ @username –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        return BAN

    elif query.data == "unban":
        await query.edit_message_text("‚úÖ –í–≤–µ–¥–∏ @username –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        return UNBAN

    elif query.data == "clear":
        data["users"].clear()
        data["banned"].clear()
        save_data(data)
        await query.edit_message_text("üóë –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")

    return ConversationHandler.END

# ---------- –†–∞—Å—Å—ã–ª–∫–∞ ----------
async def do_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    for uid, info in data["users"].items():
        if info["username"] not in data["banned"]:
            try:
                await context.bot.send_message(chat_id=int(uid), text=f"üì¢ {text}")
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {uid}: {e}")
    await update.message.reply_text("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    return ConversationHandler.END

# ---------- –ë–∞–Ω ----------
async def do_ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text.strip().lstrip("@")
    if username not in data["banned"]:
        data["banned"].append(username)
        save_data(data)
        await update.message.reply_text(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–Ω–µ.")
    return ConversationHandler.END

# ---------- –†–∞–∑–±–∞–Ω ----------
async def do_unban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text.strip().lstrip("@")
    if username in data["banned"]:
        data["banned"].remove(username)
        save_data(data)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–Ω–µ.")
    return ConversationHandler.END

# ---------- –ö–æ–º–∞–Ω–¥–∞ /send ----------
async def send_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.username in data["banned"]:
        await update.message.reply_text("üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return ConversationHandler.END

    await update.message.reply_text("üó®Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏‚Ä¶")
    return SEND_MESSAGE

# ---------- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ----------
async def handle_send_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    anon_name = data["users"].get(str(user.id), {}).get("anon_name", "–ê–Ω–æ–Ω–∏–º")

    text = update.message.text
    for uid, info in data["users"].items():
        if info["username"] not in data["banned"] and uid != str(user.id):
            try:
                await context.bot.send_message(
                    chat_id=int(uid),
                    text=f"üí¨ {anon_name}: {text}"
                )
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {uid}: {e}")

    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    return ConversationHandler.END

# ---------- –û—Ç–º–µ–Ω–∞ ----------
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

# ---------- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ----------
def main():
    TOKEN = "8349007208:AAHZgEFldSKSfDUP2RHsKJnzQCpbj3Ex7gI"  # <-- –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_panel))

    # –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
    app.add_handler(ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_menu_handler)],
        states={
            BROADCAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, do_broadcast)],
            BAN: [MessageHandler(filters.TEXT & ~filters.COMMAND, do_ban)],
            UNBAN: [MessageHandler(filters.TEXT & ~filters.COMMAND, do_unban)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    ))

    # /send
    app.add_handler(ConversationHandler(
        entry_points=[CommandHandler("send", send_command)],
        states={SEND_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_send_message)]},
        fallbacks=[CommandHandler("cancel", cancel)],
    ))

    app.run_polling()

if __name__ == "__main__":
    main()
