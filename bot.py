import json, os, random, logging
from datetime import datetime, timedelta
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    ConversationHandler, ContextTypes, filters
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
ADMIN_USERNAME = "mellfreezy"
DATA_FILE = "data.json"
MUTE_DURATION = {}  # user_id: datetime

# === –°–û–°–¢–û–Ø–ù–ò–Ø ===
SEND, BAN, UNBAN, REPLY, MUTE, PERM_CHANGE = range(6)

# === –õ–û–ì–ò ===
logging.basicConfig(level=logging.INFO)

# === –•–†–ê–ù–ò–õ–ò–©–ï ===
def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump({"users": {}, "banned": {}, "admins": [ADMIN_USERNAME]}, f)
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ===
def is_admin(update: Update) -> bool:
    return update.effective_user.username in data.get("admins", [])


def get_user_name(user):
    if is_admin_from_name(user.username):
        return f"@{user.username}"
    uid = str(user.id)
    if uid not in data["users"]:
        anon_id = random.randint(1000, 9999)
        data["users"][uid] = {"anon": f"–ê–Ω–æ–Ω–∏–º#{anon_id}", "username": user.username}
        save_data(data)
    return data["users"][uid]["anon"]


def is_admin_from_name(username):
    return username in data.get("admins", [])


# === –û–ë–´–ß–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = str(user.id)

    if uid not in data["users"]:
        anon_id = random.randint(1000, 9999)
        data["users"][uid] = {"anon": f"–ê–Ω–æ–Ω–∏–º#{anon_id}", "username": user.username}
        save_data(data)

    if is_admin(update):
        await admin_panel(update, context)
        return

    keyboard = [
        [InlineKeyboardButton("üó®Ô∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="send_message")],
        [InlineKeyboardButton("üíñ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", url="https://t.me/mellfreezy_dons")]
    ]
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))


async def handle_user_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "send_message":
        await query.edit_message_text("üó®Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏‚Ä¶")
        return SEND
    return ConversationHandler.END


async def handle_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    uid = str(user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–Ω
    if uid in data["banned"]:
        await update.message.reply_text("üö´ –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.")
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º—É—Ç
    if uid in MUTE_DURATION and datetime.now() < MUTE_DURATION[uid]:
        remain = (MUTE_DURATION[uid] - datetime.now()).seconds // 60
        await update.message.reply_text(f"‚è≥ –í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å ({remain} –º–∏–Ω.)")
        return ConversationHandler.END

    text = update.message.text
    name = get_user_name(user)

    # –†–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º
    for u in data["users"]:
        if u != uid and u not in data["banned"]:
            try:
                await context.bot.send_message(chat_id=int(u), text=f"üí¨ {name}:\n{text}")
            except Exception as e:
                logging.warning(e)
    await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    return ConversationHandler.END


# === –ê–î–ú–ò–ù–´ ===
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="users"),
         InlineKeyboardButton("üö´ –ë–∞–Ω", callback_data="ban"),
         InlineKeyboardButton("‚úÖ –†–∞–∑–±–∞–Ω", callback_data="unban")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
         InlineKeyboardButton("‚è≥ –ú—É—Ç", callback_data="mute")],
        [InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data="reply"),
         InlineKeyboardButton("üì§ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞–∑—É", callback_data="export")],
        [InlineKeyboardButton("üí¨ –ß–∞—Ç –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_chat")]
    ]
    await update.message.reply_text("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))


async def admin_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if not is_admin(update):
        return

    data_store = load_data()

    if query.data == "users":
        text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        for uid, info in data_store["users"].items():
            if uid in data_store["banned"]:
                text += f"üö´ {info.get('username', '–ë–µ–∑ —é–∑–µ—Ä–Ω–µ–π–º–∞')} (–ó–∞–±–∞–Ω–µ–Ω)\n"
            else:
                text += f"{info.get('anon', '–ê–Ω–æ–Ω–∏–º')} ‚Äî @{info.get('username')}\n"
        await query.edit_message_text(text or "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    elif query.data == "ban":
        await query.edit_message_text("üö´ –í–≤–µ–¥–∏—Ç–µ @username –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        return BAN

    elif query.data == "unban":
        await query.edit_message_text("‚úÖ –í–≤–µ–¥–∏—Ç–µ @username –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:")
        return UNBAN

    elif query.data == "stats":
        total = len(data_store["users"])
        banned = len(data_store["banned"])
        admins = len(data_store["admins"])
        await query.edit_message_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\nüö´ –ó–∞–±–∞–Ω–µ–Ω–æ: {banned}\nüßë‚Äçüíº –ê–¥–º–∏–Ω–æ–≤: {admins}")

    elif query.data == "mute":
        await query.edit_message_text("‚è≥ –í–≤–µ–¥–∏—Ç–µ @username –∏ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):")
        return MUTE

    elif query.data == "reply":
        await query.edit_message_text("üí¨ –í–≤–µ–¥–∏—Ç–µ @username –∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:")
        return REPLY

    elif query.data == "export":
        save_data(data_store)
        await query.edit_message_text("üì§ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (data.json).")

    elif query.data == "admin_chat":
        await query.edit_message_text("üí¨ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–¥–µ—Å—å, –±—É–¥—É—Ç –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º.")
        context.user_data["admin_chat"] = True

    return ConversationHandler.END


# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–´ ===
async def do_ban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text.strip().replace("@", "")
    for uid, info in data["users"].items():
        if info.get("username") == username:
            data["banned"][uid] = True
            save_data(data)
            await update.message.reply_text(f"üö´ @{username} –∑–∞–±–∞–Ω–µ–Ω.")
            return ConversationHandler.END
    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return ConversationHandler.END


async def do_unban(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text.strip().replace("@", "")
    for uid, info in data["users"].items():
        if info.get("username") == username:
            data["banned"].pop(uid, None)
            save_data(data)
            await update.message.reply_text(f"‚úÖ @{username} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
            return ConversationHandler.END
    await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return ConversationHandler.END


async def do_mute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        username, minutes = update.message.text.strip().replace("@", "").split()
        minutes = int(minutes)
        for uid, info in data["users"].items():
            if info.get("username") == username:
                MUTE_DURATION[uid] = datetime.now() + timedelta(minutes=minutes)
                await update.message.reply_text(f"‚è≥ @{username} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {minutes} –º–∏–Ω.")
                return ConversationHandler.END
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: @username –≤—Ä–µ–º—è_–≤_–º–∏–Ω—É—Ç–∞—Ö")
    return ConversationHandler.END


async def do_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        parts = update.message.text.strip().split(" ", 1)
        username, msg = parts[0].replace("@", ""), parts[1]
        for uid, info in data["users"].items():
            if info.get("username") == username:
                await context.bot.send_message(chat_id=int(uid), text=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{msg}")
                await update.message.reply_text("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                return ConversationHandler.END
        await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: @username —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è")
    return ConversationHandler.END


# === MAIN ===
def main():
    TOKEN = os.getenv("YOUR_BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("admin", admin_panel))

    app.add_handler(ConversationHandler(
        entry_points=[CallbackQueryHandler(admin_buttons)],
        states={
            BAN: [MessageHandler(filters.TEXT & ~filters.COMMAND, do_ban)],
            UNBAN: [MessageHandler(filters.TEXT & ~filters.COMMAND, do_unban)],
            REPLY: [MessageHandler(filters.TEXT & ~filters.COMMAND, do_reply)],
            MUTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, do_mute)],
        },
        fallbacks=[]
    ))

    app.add_handler(ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_user_buttons)],
        states={
            SEND: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_send)],
        },
        fallbacks=[]
    ))

    app.run_polling()


if __name__ == "__main__":
    main()
